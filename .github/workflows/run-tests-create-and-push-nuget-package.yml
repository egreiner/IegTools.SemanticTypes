name: run-tests-create-and-push-nuget-package

on:
  push:
    tags:
    - 'v*'
  workflow_dispatch:
    
env:
  PROJECT_PATH: 'src/IegTools.SemanticTypes/IegTools.SemanticTypes.csproj'
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output
  NUGET_SOURCE_URL: 'https://api.nuget.org/v3/index.json'
  
jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        dotnet-version: [ '7.0.x', '8.0.x', '9.0.x' ]
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v4
      
      # Das SDK aus der Matrix aktiv setzen
      - name: Setup active .NET SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      # Alle SDKs installieren, damit Multi-Targeting (net6/7/8/9) funktioniert
      - name: Setup additional SDKs for multi-targeting
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            7.0.x
            8.0.x
            9.0.x

      - name: Install dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Release --no-restore /p:TreatWarningsAsErrors=false

      - name: Test project
        run: dotnet test --no-restore --verbosity normal

      - name: Get Version
        uses: bbonkr/get-version-action@v1.0.4
        id: get_version
        with:
          project: ${{ env.PROJECT_PATH }}

      - name: Pack project
        run: dotnet pack ${{ env.PROJECT_PATH }} --no-restore --no-build --configuration Release -p:PackageVersion=${{ steps.get_version.outputs.version }} --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

      - name: Push package
        run: dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg -k ${{ secrets.github_nuget_open_source }} -s ${{ env.NUGET_SOURCE_URL }} --skip-duplicate 
